apply plugin: 'maven'
apply plugin: 'maven-publish'
apply plugin: 'com.jfrog.bintray'
apply plugin: 'com.github.dcendents.android-maven'

android {
    compileOptions {
        sourceCompatibility rootProject.ext.global_javaVersion
        targetCompatibility rootProject.ext.global_javaVersion
    }
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

def isReleaseBuild() {
    return version.contains("SNAPSHOT") == false
}

def readPropertyFromLocalProperties(String key) {
    Properties properties = new Properties()
    try {
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
    } catch (Exception e) {
        println("load local properties failed msg:${e.message}")
    }
    return properties.getProperty(key)
}

def getReleaseRepositoryUrl() {
    return hasProperty('RELEASE_REPOSITORY_URL') ? RELEASE_REPOSITORY_URL : readPropertyFromLocalProperties('RELEASE_REPOSITORY_URL')
}

def getSnapshotRepositoryUrl() {
    return hasProperty('SNAPSHOT_REPOSITORY_URL') ? SNAPSHOT_REPOSITORY_URL : readPropertyFromLocalProperties('SNAPSHOT_REPOSITORY_URL')
}

def getReleaseRepositoryUsername() {
    return hasProperty('RELEASE_REPOSITORY_USERNAME') ? RELEASE_REPOSITORY_USERNAME : readPropertyFromLocalProperties('RELEASE_REPOSITORY_USERNAME')
}

def getReleaseRepositoryPassword() {
    return hasProperty('RELEASE_REPOSITORY_PASSWORD') ? RELEASE_REPOSITORY_PASSWORD : readPropertyFromLocalProperties('RELEASE_REPOSITORY_PASSWORD')
}

def getSnapshotRepositoryUsername() {
    return hasProperty('SNAPSHOT_REPOSITORY_USERNAME') ? SNAPSHOT_REPOSITORY_USERNAME : readPropertyFromLocalProperties('SNAPSHOT_REPOSITORY_USERNAME')
}

def getSnapshotRepositoryPassword() {
    return hasProperty('SNAPSHOT_REPOSITORY_PASSWORD') ? SNAPSHOT_REPOSITORY_PASSWORD : readPropertyFromLocalProperties('SNAPSHOT_REPOSITORY_PASSWORD')
}

def getPomGroupId() {
    return hasProperty('POM_GROUP') ? POM_GROUP : readPropertyFromLocalProperties('POM_GROUP')
}

def getPomArtifactId() {
    return hasProperty('POM_ARTIFACT_ID') ? POM_ARTIFACT_ID : readPropertyFromLocalProperties('POM_ARTIFACT_ID')
}

def getPomVersion() {
    return hasProperty('POM_VERSION') ? POM_VERSION : readPropertyFromLocalProperties('POM_VERSION')
}

def getBintrayUser() {
    return hasProperty('BINTRAY_USER') ? BINTRAY_USER : readPropertyFromLocalProperties('BINTRAY_USER')
}

def getBintrayKey() {
    return hasProperty('BINTRAY_APIKEY') ? BINTRAY_APIKEY : readPropertyFromLocalProperties('BINTRAY_APIKEY')
}

def getPomLicense() {
    return hasProperty('POM_LICENSE') ? POM_LICENSE : readPropertyFromLocalProperties('POM_LICENSE')
}

def getPomLicenseUrl() {
    return hasProperty('POM_LICENSE_URL') ? POM_LICENSE_URL : readPropertyFromLocalProperties('POM_LICENSE_URL')
}

def getPomWebURL() {
    return hasProperty('POM_WEBSITE_URL') ? POM_WEBSITE_URL : readPropertyFromLocalProperties('POM_WEBSITE_URL')
}

def getPomVCSURL() {
    return hasProperty('POM_VCS_URL') ? POM_VCS_URL : readPropertyFromLocalProperties('POM_VCS_URL')
}

def getPomIssueURL() {
    return hasProperty('POM_ISSUE_URL') ? POM_ISSUE_URL : readPropertyFromLocalProperties('POM_ISSUE_URL')
}

def getPomDeveloperID() {
    return hasProperty('POM_DEVELOPER_ID') ? POM_DEVELOPER_ID : readPropertyFromLocalProperties('POM_DEVELOPER_ID')
}

def getPomDeveloperName() {
    return hasProperty('POM_DEVELOPER_NAME') ? POM_DEVELOPER_NAME : readPropertyFromLocalProperties('POM_DEVELOPER_NAME')
}

version = getPomVersion()
group = getPomGroupId()

def pomLicense = getPomLicense()
def pomLicenseUrl = getPomLicenseUrl()
def pomWebsiteUrl = getPomWebURL()
def pomVcsUrl = getPomVCSURL()
def pomIssueUrl = getPomIssueURL()
def pomDeveloperID = getPomDeveloperID()
def pomDeveloperName = getPomDeveloperName()

def bintrayUser = getBintrayUser()
def bintrayKey = getBintrayKey()

install {
    repositories {
        mavenInstaller {
            pom.project {
                // This generates POM.xml with proper parameters
                groupId = getPomGroupId()
                artifactId = getPomArtifactId()
                version = getPomVersion()

                scm {
                    url pomVcsUrl
                }

                licenses {
                    license {
                        name pomLicense
                        url pomLicenseUrl
                    }
                }

                developers {
                    developer {
                        id pomDeveloperID
                        name pomDeveloperName
                    }
                }
            }
        }
    }
}


uploadArchives {
    repositories {
        mavenDeployer {
            pom.groupId = getPomGroupId()
            pom.artifactId = getPomArtifactId()
            pom.version = getPomVersion()

            repository(url: getReleaseRepositoryUrl()) {
                authentication(userName: getReleaseRepositoryUsername(), password: getReleaseRepositoryPassword())
            }
            snapshotRepository(url: getSnapshotRepositoryUrl()) {
                authentication(userName: getSnapshotRepositoryUsername(), password: getSnapshotRepositoryPassword())
            }

            pom.project {
                name getPomArtifactId()
                packaging "pom"
                description "android library"
                url pomWebsiteUrl

                scm {
                    url pomVcsUrl
                }

                licenses {
                    license {
                        name pomLicense
                        url pomLicenseUrl
                    }
                }

                developers {
                    developer {
                        id pomDeveloperID
                        name pomDeveloperName
                    }
                }
            }

        }
    }
}

task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    ext.androidJar = "${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar"
    classpath += files(ext.androidJar)
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

}

task androidJavaDocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.srcDirs
}

artifacts {
    archives androidSourcesJar
    archives androidJavaDocsJar
}

afterEvaluate { project ->
    tasks.all { Task task ->
        //重新设置group
        if (task.name.equalsIgnoreCase('install')) {
            task.setGroup("maven")
        }
        //for bintrayUpload
        if (task.name.equalsIgnoreCase('bintrayUpload')) {
            task.dependsOn tasks.getByName('install')
        }
    }
}

bintray {
    user = bintrayUser
    key = bintrayKey
    configurations = ['archives']

    pkg {
        repo = 'maven'
        name = getPomArtifactId()
        licenses = [pomLicense]
        websiteUrl = pomWebsiteUrl
        vcsUrl = pomVcsUrl
        issueTrackerUrl = pomIssueUrl
        publicDownloadNumbers = true
        publish = true
    }
}

//install to local and upload to remote
task installAndUpload(dependsOn: ['install', 'uploadArchives']) {
    group = 'maven'
}
